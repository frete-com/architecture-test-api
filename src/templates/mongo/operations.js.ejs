export async function findOneDocument(connection, collectionName, query = {}) {
  const database = await connection.createConnection()
  const collection = database.collection(collectionName)

  try {
    const document = await collection.findOne(query)

    if (document) {
      return document
    }
    throw new Error('Nenhum documento encontrado com a consulta especificada.')
  } catch (error) {
    error('Erro ao realizar consulta no MongoDB: ', error)
  } finally {
    database.client.close()
  }
}

export async function findDocuments(connection, collectionName, query = {}, sort = {}) {
  const database = await connection.createConnection()
  const collection = database.collection(collectionName)

  try {
    const documents = collection.find(query).sort(sort)

    if (documents) {
      return await documents.toArray()
    }
    throw new Error('Nenhum documento encontrado com a consulta especificada.')
  } finally {
    database.client.close()
  }
}

export async function findRandomDocuments(connection, collectionName, size = 1) {
  const database = await connection.createConnection()
  const collection = database.collection(collectionName)

  try {
    const documents = collection.aggregate([{ $sample: { size } }])

    if (documents) {
      return await documents.toArray()
    }
    throw new Error('Nenhum documento encontrado com a consulta especificada.')
  } finally {
    database.client.close()
  }
}

export async function insertOneDocument(connection, collectionName, document) {
  const database = await connection.createConnection()
  const collection = database.collection(collectionName)

  try {
    const result = await collection.insertOne(document)
    console.log(`Document ${result.insertedId} insert`)
  } finally {
    database.client.close()
  }
}

export async function updateOneDocument(connection, collectionName, filter, update) {
  const database = await connection.createConnection()
  const collection = database.collection(collectionName)

  try {
    const result = await collection.updateOne(filter, update)
    console.log(`Document ${result.upsertId} update`)
  } finally {
    database.client.close()
  }
}

export async function deleteOneDocument(connection, collectionName, filter) {
  const database = await connection.createConnection()
  const collection = database.collection(collectionName)

  try {
    const result = await collection.deleteOne(filter)
    console.log(`${result.deletedCount} document delete`)
  } finally {
    database.client.close()
  }
}

export async function deleteManyDocuments(connection, collectionName, filter) {
  const database = await connection.createConnection()
  const collection = database.collection(collectionName)

  try {
    const result = await collection.deleteMany(filter)
    console.log(`${result.deletedCount} documents delete`)
  } finally {
    database.client.close()
  }
}
