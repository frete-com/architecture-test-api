# Automa√ß√£o "<%= props.name %>"

## Tecnologias

- **allure-mocha**: Integra√ß√£o com a ferramenta de gerenciamento de casos de testes [Allura TestOps](https://qameta.io/).
- **chai**: Asser√ß√£o de testes em formato de BDD / TDD.
- **dotenv**: Gerenciamento de vari√°veis de ambiente.
- **faker-js/:faker**: Gera√ß√£o de dados fake ("falsos" mas em padr√µes v√°lidos).
- **joi**: Valida√ß√£o de schema de dados.
- **mocha**: Estrutura para escrita de testes (ex.: describe, it) e runner da automa√ß√£o.
- **mongodb**: Conex√£o e execu√ß√£o de opera√ß√µes em bancos n√£o-relacionais MongoDB.
- **mysql2**: Conex√£o e execu√ß√£o de opera√ß√µes em bancos relacionais MySQL.
- **supertest**: Abstra√ß√£o de alto n√≠vel para realizar testes HTTP.
- **eslint**: Verificador de padr√µes de escrita da linguagem JavaScript.
- **prettier**: Formatador de c√≥digo opinativo
- **mochawesome**: Gerador de relat√≥rios para automa√ß√µes em estruturas Mocha.


## Arquitetura

- üìÇ  **nome-servi√ßo-api-test/**:
  - üìÇ **core/:** Cont√©m o centro da automa√ß√£o de testes de API, ou seja, as rotas que ser√£o testadas e os testes em si.
    - üìÇ **routes/:** Cont√©m as estruturas para chamada das rotas a serem testadas.
    - üìÇ **tests/:** Cont√©m as su√≠tes/:cen√°rios de testes por rotas.
  - üìÇ **support/:** Cont√©m o apoio necess√°rio e complementar para execu√ß√£o de um teste, como massa de dados, fun√ß√µes de suporte para prepara√ß√£o do ambiente de teste, gera√ß√£o de relat√≥rios...
    - üìÇ **data/:** Cont√©m os requests e responses bodies a serem utilizados na chamada da API e valida√ß√£o do retorno dos testes.
      - üìÇ **request/:** Cont√©m as estruturas de requests bodies.
      - üìÇ **response/:** Cont√©m as estruturas de responses bodies.
        - üìÇ **schema/:** Cont√©m os schemas dos responses bodies com retornos de dados din√¢micos.
      - üìÇ **database/:** Cont√©m as estruturas de conex√£o, opera√ß√µes e queries de banco de dados
        - üìÇ **mongodb/:** [SOMENTE EM PROJETOS QUE FAZEM CONEX√ÉO COM O MONGODB]
          - üìÑ **connection.js:** Fun√ß√µes referentes a abertura e fechamento de conex√£o com banco de dados n√£o relacional MongoDB.
          - üìÑ **operations.js:** Fun√ß√µes com opera√ß√µes de documentos MongoDB.
          - üìÑ **queries.js:** Fun√ß√£o com constru√ß√£o de queries do MongoDB.
        - üìÇ **mysql/:** [SOMENTE EM PROJETOS QUE FAZEM CONEX√ÉO COM O MYSQL]
          - üìÑ **connection.js:** Fun√ß√µes referentes a abertura e fechamento de conex√£o com banco de dados relacional MySQL.
          - üìÑ **queries.js:** Fun√ß√£o com constru√ß√£o de queries do MySQL.
      - üìÇ **env/:** Cont√©m estruturas referentes ao gerenciamento de vari√°veis de ambiente da aplica√ß√£o.
        - üìÑ **config-environment.js:** Fun√ß√µes referentes a valida√ß√£o e defini√ß√£o de uso de envs.
      - üìÇ **helpers/:** Cont√©m pr√© e p√≥s condi√ß√µes das estrutura de execu√ß√£o dos testes.
        - üìÑ **allure-authors.js:** Lista de nome de QAs pass√≠veis a serem autores de um conjunto de testes.
        - üìÑ **commons.js:** A√ß√µes de neg√≥cio em comum a serem realizada antes/:p√≥s a execu√ß√£o de mais de um teste.
        - üìÑ **config.js:** Estruturas de dados a serem utilizadas como configura√ß√µes fixas nos testes.
        - üìÑ **report.js:** A√ß√µes atreladas a gera√ß√£o de report de execu√ß√£o de teste.
        - üìÑ **utils:** Possui fun√ß√µes utilit√°rias que auxiliam na constru√ß√£o e execu√ß√£o dos testes.
  - üìÑ **.env:** Cont√©m as vari√°veis de ambiente.
  - üìÑ **.env.example:** Cont√©m o modelo de declara√ß√£o das vari√°veis de ambiente.
  - üìÑ **.eslintignore:** Cont√©m a defini√ß√£o de pastas e arquivos que devem ter a verifica√ß√£o do eslint ignorada.
  - üìÑ **.eslintrc:** Cont√©m as defini√ß√µes de configura√ß√£o do eslint.
  - üìÑ **.gitignore:** Cont√©m a defini√ß√£o de pastas e arquivos que n√£o devem subir para o reposit√≥rio do projeto no gitlab.
  - üìÑ **.gitlab-ci.yml:** Cont√©m as defini√ß√µes e configura√ß√µes da pipeline CI/:CD do gitlab.
  - üìÑ **.mocharc.json:** Cont√©m as defini√ß√µes de configura√ß√£o do mocha.
  - üìÑ **.npmrc:** Cont√©m as defini√ß√µes de configura√ß√£o do npm.
  - üìÑ **.README.md:** Cont√©m a apresenta√ß√£o e informa√ß√µes sobre o projeto.
  - üìÑ **.package.json:** Cont√©m as defini√ß√µes do projeto de automa√ß√£o.
  - üìÑ **.prettier.config.cjs:** Cont√©m as defini√ß√µes de configura√ß√£o do prettier.

## Instala√ß√£o

### Pr√©-requisitos

- **Node** (>= 18)
- **NPM**

### Instalar depend√™ncias

Com o terminal aberto no diret√≥rio do projeto execute o comando:

```bash
npm i
```

### Execu√ß√£o 

#### Executando os testes

Com o terminal aberto no diret√≥rio do projeto execute o comando:

```bash
npm run test
```

**OBS:** O mochawesome-report gerar√° um HTML na pasta `mochawesome-report`

#### Executando o lint

Com o terminal aberto no diret√≥rio do projeto execute o comando:

```bash
npm run lint
```

**OBS:** As corre√ß√µes autom√°ticas do eslint ser√£o realizadas ap√≥s a execu√ß√£o do comando.

#### Executando o code style

Com o terminal aberto no diret√≥rio do projeto execute o comando:

```bash
npm run code-style
```

**OBS:** As corre√ß√µes autom√°ticas do prettier ser√£o realizadas ap√≥s a execu√ß√£o do comando.
